diff --git a/node_modules/apollo-client/ApolloClient.d.ts b/node_modules/apollo-client/ApolloClient.d.ts
index 33fc2ee..1bab35b 100644
--- a/node_modules/apollo-client/ApolloClient.d.ts
+++ b/node_modules/apollo-client/ApolloClient.d.ts
@@ -44,12 +44,12 @@ export default class ApolloClient<TCacheShape> implements DataProxy {
     private localState;
     constructor(options: ApolloClientOptions<TCacheShape>);
     stop(): void;
-    watchQuery<T = any, TVariables = OperationVariables>(options: WatchQueryOptions<TVariables>): ObservableQuery<T, TVariables>;
-    query<T = any, TVariables = OperationVariables>(options: QueryOptions<TVariables>): Promise<ApolloQueryResult<T>>;
+    watchQuery<T = any, TVariables = OperationVariables>(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables>;
+    query<T = any, TVariables = OperationVariables>(options: QueryOptions<TVariables, T>): Promise<ApolloQueryResult<T>>;
     mutate<T = any, TVariables = OperationVariables>(options: MutationOptions<T, TVariables>): Promise<FetchResult<T>>;
-    subscribe<T = any, TVariables = OperationVariables>(options: SubscriptionOptions<TVariables>): Observable<FetchResult<T>>;
-    readQuery<T = any, TVariables = OperationVariables>(options: DataProxy.Query<TVariables>, optimistic?: boolean): T | null;
-    readFragment<T = any, TVariables = OperationVariables>(options: DataProxy.Fragment<TVariables>, optimistic?: boolean): T | null;
+    subscribe<T = any, TVariables = OperationVariables>(options: SubscriptionOptions<TVariables, T>): Observable<FetchResult<T>>;
+    readQuery<T = any, TVariables = OperationVariables>(options: DataProxy.Query<TVariables, T>, optimistic?: boolean): T | null;
+    readFragment<T = any, TVariables = OperationVariables>(options: DataProxy.Fragment<TVariables, T>, optimistic?: boolean): T | null;
     writeQuery<TData = any, TVariables = OperationVariables>(options: DataProxy.WriteQueryOptions<TData, TVariables>): void;
     writeFragment<TData = any, TVariables = OperationVariables>(options: DataProxy.WriteFragmentOptions<TData, TVariables>): void;
     writeData<TData = any>(options: DataProxy.WriteDataOptions<TData>): void;
diff --git a/node_modules/apollo-client/core/ObservableQuery.d.ts b/node_modules/apollo-client/core/ObservableQuery.d.ts
index c2e01f4..715e842 100644
--- a/node_modules/apollo-client/core/ObservableQuery.d.ts
+++ b/node_modules/apollo-client/core/ObservableQuery.d.ts
@@ -34,7 +34,7 @@ export interface UpdateQueryOptions<TVariables> {
 }
 export declare const hasError: (storeValue: QueryStoreValue, policy?: ErrorPolicy) => boolean | Error;
 export declare class ObservableQuery<TData = any, TVariables = OperationVariables> extends Observable<ApolloQueryResult<TData>> {
-    options: WatchQueryOptions<TVariables>;
+    options: WatchQueryOptions<TVariables, TData>;
     readonly queryId: string;
     readonly queryName?: string;
     variables: TVariables;
@@ -60,7 +60,7 @@ export declare class ObservableQuery<TData = any, TVariables = OperationVariable
     resetLastResults(): void;
     resetQueryStoreErrors(): void;
     refetch(variables?: TVariables): Promise<ApolloQueryResult<TData>>;
-    fetchMore<K extends keyof TVariables>(fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> & FetchMoreOptions<TData, TVariables>): Promise<ApolloQueryResult<TData>>;
+    fetchMore<K extends keyof TVariables>(fetchMoreOptions: FetchMoreQueryOptions<TVariables, K, TData> & FetchMoreOptions<TData, TVariables>): Promise<ApolloQueryResult<TData>>;
     subscribeToMore<TSubscriptionData = TData, TSubscriptionVariables = TVariables>(options: SubscribeToMoreOptions<TData, TSubscriptionVariables, TSubscriptionData>): () => void;
     setOptions(opts: WatchQueryOptions): Promise<ApolloQueryResult<TData> | void>;
     setVariables(variables: TVariables, tryFetch?: boolean, fetchResults?: boolean): Promise<ApolloQueryResult<TData> | void>;
diff --git a/node_modules/apollo-client/core/QueryManager.d.ts b/node_modules/apollo-client/core/QueryManager.d.ts
index ca23f6a..4ca9d03 100644
--- a/node_modules/apollo-client/core/QueryManager.d.ts
+++ b/node_modules/apollo-client/core/QueryManager.d.ts
@@ -9,6 +9,8 @@ import { QueryOptions, WatchQueryOptions, SubscriptionOptions, MutationOptions }
 import { ObservableQuery } from './ObservableQuery';
 import { QueryListener, ApolloQueryResult, FetchType, OperationVariables } from './types';
 import { LocalState } from './LocalState';
+import { TypedDocumentNode } from '@graphql-typed-document-node/core';
+
 export interface QueryInfo {
     listeners: Set<QueryListener>;
     invalidated: boolean;
@@ -45,7 +47,7 @@ export declare class QueryManager<TStore> {
     });
     stop(): void;
     mutate<T>({ mutation, variables, optimisticResponse, updateQueries: updateQueriesByName, refetchQueries, awaitRefetchQueries, update: updateWithProxyFn, errorPolicy, fetchPolicy, context, }: MutationOptions): Promise<FetchResult<T>>;
-    fetchQuery<T>(queryId: string, options: WatchQueryOptions, fetchType?: FetchType, fetchMoreForQueryId?: string): Promise<FetchResult<T>>;
+    fetchQuery<T>(queryId: string, options: WatchQueryOptions<any, T>, fetchType?: FetchType, fetchMoreForQueryId?: string): Promise<FetchResult<T>>;
     private markQueryResult;
     queryListenerForObserver<T>(queryId: string, options: WatchQueryOptions, observer: Observer<ApolloQueryResult<T>>): QueryListener;
     private transformCache;
@@ -58,8 +60,8 @@ export declare class QueryManager<TStore> {
         defaultVars: Readonly<OperationVariables>;
     }>;
     private getVariables;
-    watchQuery<T, TVariables = OperationVariables>(options: WatchQueryOptions, shouldSubscribe?: boolean): ObservableQuery<T, TVariables>;
-    query<T>(options: QueryOptions): Promise<ApolloQueryResult<T>>;
+    watchQuery<T, TVariables = OperationVariables>(options: WatchQueryOptions<TVariables, T>, shouldSubscribe?: boolean): ObservableQuery<T, TVariables>;
+    query<T>(options: QueryOptions<any, T>): Promise<ApolloQueryResult<T>>;
     generateQueryId(): string;
     stopQueryInStore(queryId: string): void;
     private stopQueryInStoreNoBroadcast;
@@ -83,7 +85,7 @@ export declare class QueryManager<TStore> {
     getQueryWithPreviousResult<TData, TVariables = OperationVariables>(queryIdOrObservable: string | ObservableQuery<TData, TVariables>): {
         previousResult: any;
         variables: TVariables | undefined;
-        document: DocumentNode;
+        document: DocumentNode | TypedDocumentNode<TData, TVariables>;
     };
     broadcastQueries(): void;
     getLocalState(): LocalState<TStore>;
diff --git a/node_modules/apollo-client/core/watchQueryOptions.d.ts b/node_modules/apollo-client/core/watchQueryOptions.d.ts
index 2e702c6..2aae618 100644
--- a/node_modules/apollo-client/core/watchQueryOptions.d.ts
+++ b/node_modules/apollo-client/core/watchQueryOptions.d.ts
@@ -3,30 +3,32 @@ import { FetchResult } from 'apollo-link';
 import { DataProxy } from 'apollo-cache';
 import { MutationQueryReducersMap } from './types';
 import { PureQueryOptions, OperationVariables } from './types';
+import { TypedDocumentNode } from '@graphql-typed-document-node/core';
+
 export declare type FetchPolicy = 'cache-first' | 'network-only' | 'cache-only' | 'no-cache' | 'standby';
 export declare type WatchQueryFetchPolicy = FetchPolicy | 'cache-and-network';
 export declare type ErrorPolicy = 'none' | 'ignore' | 'all';
-export interface QueryBaseOptions<TVariables = OperationVariables> {
-    query: DocumentNode;
+export interface QueryBaseOptions<TVariables = OperationVariables, TData = any> {
+    query: DocumentNode | TypedDocumentNode<TData, TVariables>;
     variables?: TVariables;
     errorPolicy?: ErrorPolicy;
     fetchResults?: boolean;
     metadata?: any;
     context?: any;
 }
-export interface QueryOptions<TVariables = OperationVariables> extends QueryBaseOptions<TVariables> {
+export interface QueryOptions<TVariables = OperationVariables, TData = any> extends QueryBaseOptions<TVariables, TData> {
     fetchPolicy?: FetchPolicy;
 }
-export interface ModifiableWatchQueryOptions<TVariables = OperationVariables> extends QueryBaseOptions<TVariables> {
+export interface ModifiableWatchQueryOptions<TVariables = OperationVariables, TData = any> extends QueryBaseOptions<TVariables, TData> {
     pollInterval?: number;
     notifyOnNetworkStatusChange?: boolean;
     returnPartialData?: boolean;
 }
-export interface WatchQueryOptions<TVariables = OperationVariables> extends QueryBaseOptions<TVariables>, ModifiableWatchQueryOptions<TVariables> {
+export interface WatchQueryOptions<TVariables = OperationVariables, TData = any> extends QueryBaseOptions<TVariables, TData>, ModifiableWatchQueryOptions<TVariables, TData> {
     fetchPolicy?: WatchQueryFetchPolicy;
 }
-export interface FetchMoreQueryOptions<TVariables, K extends keyof TVariables> {
-    query?: DocumentNode;
+export interface FetchMoreQueryOptions<TVariables, K extends keyof TVariables, TData = any> {
+    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;
     variables?: Pick<TVariables, K>;
     context?: any;
 }
@@ -37,13 +39,13 @@ export declare type UpdateQueryFn<TData = any, TSubscriptionVariables = Operatio
     variables?: TSubscriptionVariables;
 }) => TData;
 export declare type SubscribeToMoreOptions<TData = any, TSubscriptionVariables = OperationVariables, TSubscriptionData = TData> = {
-    document: DocumentNode;
+    document: DocumentNode | TypedDocumentNode<TData, TSubscriptionVariables>;
     variables?: TSubscriptionVariables;
     updateQuery?: UpdateQueryFn<TData, TSubscriptionVariables, TSubscriptionData>;
     onError?: (error: Error) => void;
 };
-export interface SubscriptionOptions<TVariables = OperationVariables> {
-    query: DocumentNode;
+export interface SubscriptionOptions<TVariables = OperationVariables, TData = any> {
+    query: DocumentNode | TypedDocumentNode<TData, TVariables>;
     variables?: TVariables;
     fetchPolicy?: FetchPolicy;
 }
@@ -62,7 +64,7 @@ export interface MutationBaseOptions<T = {
 export interface MutationOptions<T = {
     [key: string]: any;
 }, TVariables = OperationVariables> extends MutationBaseOptions<T, TVariables> {
-    mutation: DocumentNode;
+    mutation: DocumentNode | TypedDocumentNode<T, TVariables>;
     context?: any;
     fetchPolicy?: FetchPolicy;
 }
