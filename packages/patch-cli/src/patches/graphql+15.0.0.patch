diff --git a/node_modules/graphql/execution/execute.d.ts b/node_modules/graphql/execution/execute.d.ts
index 46a1bc6..a1fb183 100644
--- a/node_modules/graphql/execution/execute.d.ts
+++ b/node_modules/graphql/execution/execute.d.ts
@@ -1,6 +1,7 @@
 import Maybe from '../tsutils/Maybe';
 import { PromiseOrValue } from '../jsutils/PromiseOrValue';
 import { Path } from '../jsutils/Path';
+import { TypedDocumentNode } from "@graphql-typed-document-node/core";
 
 import { GraphQLError } from '../error/GraphQLError';
 
@@ -43,17 +44,17 @@ export interface ExecutionContext {
  *   - `errors` is included when any errors occurred as a non-empty array.
  *   - `data` is the result of a successful execution of the query.
  */
-export interface ExecutionResult {
+export interface ExecutionResult<TData = { [key: string]: any }> {
   errors?: ReadonlyArray<GraphQLError>;
-  data?: { [key: string]: any } | null;
+  data?: TData | null;
 }
 
-export type ExecutionArgs = {
+export type ExecutionArgs<TData = any, TVariables = any> = {
   schema: GraphQLSchema;
-  document: DocumentNode;
+  document: DocumentNode | TypedDocumentNode<TData, TVariables>;
   rootValue?: any;
   contextValue?: any;
-  variableValues?: Maybe<{ [key: string]: any }>;
+  variableValues?: Maybe<TVariables>;
   operationName?: Maybe<string>;
   fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>;
   typeResolver?: Maybe<GraphQLTypeResolver<any, any>>;
@@ -71,17 +72,17 @@ export type ExecutionArgs = {
  *
  * Accepts either an object with named arguments, or individual arguments.
  */
-export function execute(args: ExecutionArgs): PromiseOrValue<ExecutionResult>;
-export function execute(
+export function execute<TData = any, TVariables = any>(args: ExecutionArgs<TData, TVariables>): PromiseOrValue<ExecutionResult<TData>>;
+export function execute<TData = any, TVariables = any>(
   schema: GraphQLSchema,
-  document: DocumentNode,
+  document: DocumentNode | TypedDocumentNode<TData, TVariables>,
   rootValue?: any,
   contextValue?: any,
-  variableValues?: Maybe<{ [key: string]: any }>,
+  variableValues?: Maybe<TVariables>,
   operationName?: Maybe<string>,
   fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>,
   typeResolver?: Maybe<GraphQLTypeResolver<any, any>>,
-): PromiseOrValue<ExecutionResult>;
+): PromiseOrValue<ExecutionResult<TData>>;
 
 /**
  * Essential assertions before executing to provide developer feedback for
