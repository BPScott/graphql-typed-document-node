diff --git a/node_modules/@vue/apollo-composable/dist/useMutation.d.ts b/node_modules/@vue/apollo-composable/dist/useMutation.d.ts
index 28840d9..e9111c3 100644
--- a/node_modules/@vue/apollo-composable/dist/useMutation.d.ts
+++ b/node_modules/@vue/apollo-composable/dist/useMutation.d.ts
@@ -3,6 +3,7 @@ import { MutationOptions, OperationVariables } from 'apollo-client';
 import { Ref } from 'vue-demi';
 import { FetchResult } from 'apollo-link';
 import { ReactiveFunction } from './util/ReactiveFunction';
+import { TypedDocumentNode } from "@graphql-typed-document-node/core";
 /**
  * `useMutation` options for mutations that don't require `variables`.
  */
@@ -27,8 +28,8 @@ export interface UseMutationReturn<TResult, TVariables> {
 /**
  * Use a mutation with variables.
  */
-export declare function useMutation<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentNode | ReactiveFunction<DocumentNode>, options?: UseMutationOptions<TResult, TVariables> | ReactiveFunction<UseMutationOptions<TResult, TVariables>>): UseMutationReturn<TResult, TVariables>;
+export declare function useMutation<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: TypedDocumentNode<TResult, TVariables> | DocumentNode | ReactiveFunction<DocumentNode> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>>, options?: UseMutationOptions<TResult, TVariables> | ReactiveFunction<UseMutationOptions<TResult, TVariables>>): UseMutationReturn<TResult, TVariables>;
 /**
  * Use a mutation with variables, but without a default.
  */
-export declare function useMutation<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentNode | ReactiveFunction<DocumentNode>, options?: UseMutationOptions<TResult, undefined> | ReactiveFunction<UseMutationOptions<TResult, undefined>>): UseMutationReturn<TResult, TVariables>;
+export declare function useMutation<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: TypedDocumentNode<TResult, TVariables> | DocumentNode | ReactiveFunction<DocumentNode> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>>, options?: UseMutationOptions<TResult, undefined> | ReactiveFunction<UseMutationOptions<TResult, undefined>>): UseMutationReturn<TResult, TVariables>;
diff --git a/node_modules/@vue/apollo-composable/dist/useQuery.d.ts b/node_modules/@vue/apollo-composable/dist/useQuery.d.ts
index 4f61b5e..062f7b4 100644
--- a/node_modules/@vue/apollo-composable/dist/useQuery.d.ts
+++ b/node_modules/@vue/apollo-composable/dist/useQuery.d.ts
@@ -2,6 +2,8 @@ import { Ref } from 'vue-demi';
 import { DocumentNode } from 'graphql';
 import { OperationVariables, WatchQueryOptions, ObservableQuery, ApolloQueryResult, SubscribeToMoreOptions, FetchMoreQueryOptions, FetchMoreOptions } from 'apollo-client';
 import { ReactiveFunction } from './util/ReactiveFunction';
+import { TypedDocumentNode } from "@graphql-typed-document-node/core";
+
 export interface UseQueryOptions<TResult = any, TVariables = OperationVariables> extends Omit<WatchQueryOptions<TVariables>, 'query' | 'variables'> {
     clientId?: string;
     enabled?: boolean;
@@ -34,20 +36,20 @@ export interface UseQueryReturn<TResult, TVariables> {
 /**
  * Use a query that does not require variables or options.
  * */
-export declare function useQuery<TResult = any>(document: DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>): UseQueryReturn<TResult, undefined>;
+export declare function useQuery<TResult = any>(document: TypedDocumentNode<TResult, undefined> | DocumentNode | Ref<TypedDocumentNode<TResult, undefined>> | Ref<DocumentNode> | ReactiveFunction<DocumentNode> | ReactiveFunction<TypedDocumentNode<TResult, undefined>>): UseQueryReturn<TResult, undefined>;
 /**
  * Use a query that has optional variables but not options
  */
-export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>): UseQueryReturn<TResult, TVariables>;
+export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>> | DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>): UseQueryReturn<TResult, TVariables>;
 /**
  * Use a query that has required variables but not options
  */
-export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables): UseQueryReturn<TResult, TVariables>;
+export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>> | DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables): UseQueryReturn<TResult, TVariables>;
 /**
  * Use a query that requires options but not variables.
  */
-export declare function useQuery<TResult = any, TVariables extends undefined = undefined>(document: DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables, options: UseQueryOptions<TResult, TVariables> | Ref<UseQueryOptions<TResult, TVariables>> | ReactiveFunction<UseQueryOptions<TResult, TVariables>>): UseQueryReturn<TResult, TVariables>;
+export declare function useQuery<TResult = any, TVariables extends undefined = undefined>(document: TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>> | DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables, options: UseQueryOptions<TResult, TVariables> | Ref<UseQueryOptions<TResult, TVariables>> | ReactiveFunction<UseQueryOptions<TResult, TVariables>>): UseQueryReturn<TResult, TVariables>;
 /**
  * Use a query that requires variables and options.
  */
-export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables | Ref<TVariables> | ReactiveFunction<TVariables>, options: UseQueryOptions<TResult, TVariables> | Ref<UseQueryOptions<TResult, TVariables>> | ReactiveFunction<UseQueryOptions<TResult, TVariables>>): UseQueryReturn<TResult, TVariables>;
+export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>> | DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables | Ref<TVariables> | ReactiveFunction<TVariables>, options: UseQueryOptions<TResult, TVariables> | Ref<UseQueryOptions<TResult, TVariables>> | ReactiveFunction<UseQueryOptions<TResult, TVariables>>): UseQueryReturn<TResult, TVariables>;
diff --git a/node_modules/@vue/apollo-composable/dist/useSubscription.d.ts b/node_modules/@vue/apollo-composable/dist/useSubscription.d.ts
index c32164c..cc85cc8 100644
--- a/node_modules/@vue/apollo-composable/dist/useSubscription.d.ts
+++ b/node_modules/@vue/apollo-composable/dist/useSubscription.d.ts
@@ -4,6 +4,8 @@ import { OperationVariables, SubscriptionOptions } from 'apollo-client';
 import { Observable } from 'apollo-client/util/Observable';
 import { FetchResult } from 'apollo-link';
 import { ReactiveFunction } from './util/ReactiveFunction';
+import { TypedDocumentNode } from "@graphql-typed-document-node/core";
+
 export interface UseSubscriptionOptions<TResult = any, TVariables = OperationVariables> extends Omit<SubscriptionOptions<TVariables>, 'query' | 'variables'> {
     clientId?: string;
     enabled?: boolean;
@@ -31,20 +33,20 @@ export interface UseSubscriptionReturn<TResult, TVariables> {
 /**
  * Use a subscription that does not require variables or options.
  * */
-export declare function useSubscription<TResult = any>(document: DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>): UseSubscriptionReturn<TResult, undefined>;
+export declare function useSubscription<TResult = any>(document: TypedDocumentNode<TResult, undefined> | Ref<TypedDocumentNode<TResult, undefined>> | ReactiveFunction<TypedDocumentNode<TResult, undefined>> | DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>): UseSubscriptionReturn<TResult, undefined>;
 /**
  * Use a subscription that requires options but not variables.
  */
-export declare function useSubscription<TResult = any, TVariables extends undefined = undefined>(document: DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables, options: UseSubscriptionOptions<TResult, TVariables> | Ref<UseSubscriptionOptions<TResult, TVariables>> | ReactiveFunction<UseSubscriptionOptions<TResult, TVariables>>): UseSubscriptionReturn<TResult, TVariables>;
+export declare function useSubscription<TResult = any, TVariables extends undefined = undefined>(document: TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>> | DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables, options: UseSubscriptionOptions<TResult, TVariables> | Ref<UseSubscriptionOptions<TResult, TVariables>> | ReactiveFunction<UseSubscriptionOptions<TResult, TVariables>>): UseSubscriptionReturn<TResult, TVariables>;
 /**
  * Use a subscription that requires variables.
  */
-export declare function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables | Ref<TVariables> | ReactiveFunction<TVariables>): UseSubscriptionReturn<TResult, TVariables>;
+export declare function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>> | DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables | Ref<TVariables> | ReactiveFunction<TVariables>): UseSubscriptionReturn<TResult, TVariables>;
 /**
  * Use a subscription that has optional variables.
  */
-export declare function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>): UseSubscriptionReturn<TResult, TVariables>;
+export declare function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>> | DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>): UseSubscriptionReturn<TResult, TVariables>;
 /**
  * Use a subscription that requires variables and options.
  */
-export declare function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables | Ref<TVariables> | ReactiveFunction<TVariables>, options: UseSubscriptionOptions<TResult, TVariables> | Ref<UseSubscriptionOptions<TResult, TVariables>> | ReactiveFunction<UseSubscriptionOptions<TResult, TVariables>>): UseSubscriptionReturn<TResult, TVariables>;
+export declare function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>> | DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode>, variables: TVariables | Ref<TVariables> | ReactiveFunction<TVariables>, options: UseSubscriptionOptions<TResult, TVariables> | Ref<UseSubscriptionOptions<TResult, TVariables>> | ReactiveFunction<UseSubscriptionOptions<TResult, TVariables>>): UseSubscriptionReturn<TResult, TVariables>;
